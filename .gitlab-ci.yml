stages:
  - test
  - build
  - deploy


# ============================
# Test the application
# ============================
test_app:
  stage: test
  image: node:20
  before_script:
    - cd UserApi/app
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_DB: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  script:
    - apt-get update && apt-get install -y postgresql-client
    - until pg_isready -h postgres -U $POSTGRES_USER; do echo "Waiting for DB..."; sleep 1; done
    - |
      PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c "
        CREATE TABLE IF NOT EXISTS users (
          username VARCHAR(255) PRIMARY KEY,
          firstname VARCHAR(255) NOT NULL,
          lastname VARCHAR(255) NOT NULL
        );
      "
    - npm install
    - npm test

# ============================
# Build the Docker image
# ============================
build_app:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_NAME: $IMAGE_NAME
    REGISTRY_USER: $REGISTRY_USER
    REGISTRY_PASS: $REGISTRY_PASS    
  before_script:
    - cd UserApi
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    # Extract version from index.js
    - VERSION=$(sed -n 's/^[[:space:]]*const version *= *"\([0-9]\+\.[0-9]\+\.[0-9]\+\)".*/\1/p' app/src/index.js)


    - echo "VERSION=$VERSION"

    # Build and push
    - docker build --no-cache -t $IMAGE_NAME:$VERSION .
    - docker push $IMAGE_NAME:$VERSION

# ============================
# Deploy to K8s
# ============================
deploy:
  stage: deploy
  variables:
    IMAGE_NAME: $IMAGE_NAME  
  script:
    # Extract version from index.js
    - VERSION=$(sed -n 's/^[[:space:]]*const version *= *"\([0-9]\+\.[0-9]\+\.[0-9]\+\)".*/\1/p' app/src/index.js)


    
    - chmod 600 "$SSH_KEY"
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@www.ronaldlepape.fr "
        sudo crictl rmi $IMAGE_NAME:$VERSION || true &&
        sudo kubectl set image deployment/mywebapp mywebapp=$IMAGE_NAME:$VERSION --namespace=default &&
        sudo kubectl rollout restart deployment/mywebapp --namespace=default
      "