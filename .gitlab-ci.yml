#=================================================================================
#             GitLab CI/CD Pipeline
#     ---------------------------------------
#  Stages: Test -> Build (master branch only) -> Deploy (idem)
#
#=================================================================================
stages:
  - test
  - build
  - deploy


# ============================
# Test the application
# ============================
test_app:
  stage: test
  image: node:20
  before_script:
    - cd UserApi/app
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_DB: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  script:
    - apt-get update && apt-get install -y postgresql-client
    - until pg_isready -h postgres -U $POSTGRES_USER; do echo "Waiting for DB..."; sleep 1; done
    - |
      PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c "
        CREATE TABLE IF NOT EXISTS users (
          username VARCHAR(255) PRIMARY KEY,
          firstname VARCHAR(255) NOT NULL,
          lastname VARCHAR(255) NOT NULL
        );
      "
    - npm install
    - npm test

# =============================
# Build the Docker image
# =============================
build_app:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_NAME: $IMAGE_NAME
    REGISTRY_USER: $REGISTRY_USER
    REGISTRY_PASS: $REGISTRY_PASS    
  before_script:
    - cd UserApi
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    # Extract version from index.js
    - VERSION=$(grep appversion app/src/index.js | cut -d'"' -f2)
    - TAG="myapp-$VERSION"

    # Building and pushing image to Docker Hub
    - echo "Building Docker image with tag $IMAGE_NAME:$TAG"
    - docker build --no-cache -t "$IMAGE_NAME:$TAG" .
    - docker push "$IMAGE_NAME:$TAG"
  # build stage occurs only for pushes in master branch
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success


# ============================
# Deploy to K3s
# ============================
deploy:
  stage: deploy
  variables:
    IMAGE_NAME: $IMAGE_NAME
  before_script:
    - cd UserApi  
  script:
    - VERSION=$(grep appversion app/src/index.js | cut -d'"' -f2)
    - TAG="myapp-$VERSION"
    - echo "Deploying Docker image with tag $IMAGE_NAME:$TAG"
    - chmod 600 "$SSH_KEY"
    - >
      ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@www.ronaldlepape.fr "
        # Delete all images with the same prefix
        sudo crictl images | grep '$IMAGE_NAME' | awk '{print \$3}' | while read -r ID; do
          echo Deleting image \$ID;
          sudo crictl rmi \$ID || true;
        done &&
        # Set new image for mywebapp v1 and mywebapp v2 (will be the same in our case)
        sudo kubectl set image deployment/mywebapp-v1 mywebapp=$IMAGE_NAME:$TAG --namespace=default &&
        sudo kubectl set image deployment/mywebapp-v2 mywebapp=$IMAGE_NAME:$TAG --namespace=default &&
        # Deploying
        sudo kubectl rollout restart deployment/mywebapp-v1 --namespace=default &&
        sudo kubectl rollout restart deployment/mywebapp-v2 --namespace=default
      "
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual

