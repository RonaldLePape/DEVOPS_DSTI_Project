stages:
  - test
  - build
  - deploy

# Testing tha app
test_app:
  stage: test
  image: node:20
  before_script:
    - cd UserApi/app
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_DB: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD      
  script:
    - apt-get update && apt-get install -y postgresql-client
    - until pg_isready -h postgres -U $POSTGRES_USER; do echo "Waiting for DB..."; sleep 1; done
    - |
      PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c "
        CREATE TABLE IF NOT EXISTS users (
          username VARCHAR(255) PRIMARY KEY,
          firstname VARCHAR(255) NOT NULL,
          lastname VARCHAR(255) NOT NULL
        );
      "
    - npm install
    - npm test

# Here a runner will buid a Docker image : it must containt Docker CLI (=> image=docker:latest) + Docker Daemon (=> service=docker:dind)
# Note : "dind" = "Docker In Docker"
build_app:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    REGISTRY_USER: $REGISTRY_USER
    REGISTRY_PASS: $REGISTRY_PASS
    IMAGE_NAME: $IMAGE_NAME
    IMAGE_TAG: $IMAGE_TAG
  before_script:
    - cd UserApi
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS    
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .  
    - docker push $IMAGE_NAME:$IMAGE_TAG

# Here a runner will deploy the new version of the app
deploy:
  stage: deploy
  variables:
    IMAGE_NAME: $IMAGE_NAME
    IMAGE_TAG: $IMAGE_TAG
  script:
    - chmod 600 "$SSH_KEY"
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@www.ronaldlepape.fr "
        kubectl set image deployment/mywebapp mywebapp=$IMAGE_NAME:$IMAGE_TAG --namespace=default &&
        kubectl rollout status deployment/mywebapp --namespace=default
     "

