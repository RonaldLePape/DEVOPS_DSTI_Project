- hosts: all
  become: true
  vars:
    db_user: myuser
    db_password: MySecretPassword123
    db_name: myproject_db

  tasks:

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install curl
      apt:
        name: curl
        state: present

    - name: Install Net Tools
      apt:
        name: net-tools
        state: present

# Adding "postgres" in /etc/hosts for name resolution
    - name: Replace localhost line to include postgres using replace
      replace:
        path: /etc/hosts
        regexp: '^127\.0\.0\.1\s+localhost\s*$'
        replace: '127.0.0.1       localhost postgres'
        backup: no


# Install Node.JS 20.x (= latest version of this major version)
# Will be installed from Nodes's repo' instead of ubuntu apt repo (ubuntu store may be outdated)
    - name: Install Node.js 20.x
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        apt install -y nodejs

# Install Postgres 15 from Postgres repo
# Same comment as above
    - name: Add PostgreSQL signing key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add PostgreSQL APT repository
      apt_repository:
        repo: 'deb http://apt.postgresql.org/pub/repos/apt jammy-pgdg main'
        state: present
        filename: 'pgdg'

    - name: Install PostgreSQL 15
      apt:
        name: postgresql-15
        state: present

# Switch local PostgreSQL authentication from peer (OS user) to md5 (password-based) 
# Why : to be accessible from a non-linux user (myuser exists only in postgres)
    - name: Find and replace "peer" with "md5" in pg_hba.conf
      replace:
        path: /etc/postgresql/15/main/pg_hba.conf
        regexp: '^local\s+all\s+all\s+peer'
        replace: 'local   all             all                                     md5'
        backup: yes

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted

# Creating a Postgres user with an SQL command
    - name: Manually create PostgreSQL user (shell workaround)
      become: true
      shell: |
        sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ db_user }}'" | grep -q 1 || \
        sudo -u postgres psql -c "CREATE USER {{ db_user }} WITH PASSWORD '{{ db_password }}';"

# Creating a Postgres database with an SQL command
    - name: Manually create PostgreSQL database
      become: true
      shell: |
        sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='{{ db_name }}'" | grep -q 1 || \
        sudo -u postgres psql -c "CREATE DATABASE {{ db_name }} OWNER {{ db_user }};"

# Executing SQL commands : creating users table, adding data rows to users
    - name: Create PostgreSQL tables and insert some users
      shell: |
        sudo -u postgres psql -d myproject_db -f /home/dsti_project/Postgres/01-init-users-table.sql && \
        sudo -u postgres psql -d myproject_db -f /home/dsti_project/Postgres/02-init-users.sql
      args:
        executable: /bin/bash

# Installing Docker
    - name: Install Docker
      shell: |
        sudo apt install -y docker.io && \
        mkdir -p myapp && \
        sudo systemctl enable --now docker
      args:
        executable: /bin/bash

# Installing Docker Compose "manually" (Compose not present in apt Docker package)
    - name: Install Docker Compose
      shell: |
        sudo apt-get update && \
        sudo apt-get install -y ca-certificates curl gnupg lsb-release && \
        sudo install -m 0755 -d /etc/apt/keyrings && \
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
        sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
        echo \
        "deb [arch=$(dpkg --print-architecture) \
        signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
        sudo apt-get update && \
        sudo apt-get install -y docker-compose-plugin
      args:
        executable: /bin/bash

# "npm install" will create folder node_modules in a non shared folder ("npm install" fails to create symlinks on shared volumes)
# -> Lauching "npm install" with --prefix /home/node_tmp
    - name: npm install
      shell: |
        cd /home && \
        sudo mkdir node_tmp && \
        sudo cp -r /home/dsti_project/UserApi/app/package.json /home/node_tmp  && \        
        cd /home/userapi && \
        sudo npm install --prefix /home/node_tmp
      args:
        executable: /bin/bash

# In packages.json, replace the default test line:
    - name: Replace test script in package.json
      replace:
        path: /home/userapi/package.json
        regexp: '"test":\s*"mocha test/\*\.js"'
        replace: '"test": "/home/node_tmp/node_modules/.bin/mocha test/*.js"'


# Creating a "myapp-start" script to start the app easily :-)
# The NODE_PATH tells Node where to look for node_modules directory
    - name: Create myapp-start script
      shell: |
        cat << 'EOF' | sudo tee /usr/local/bin/myapp-start > /dev/null
        #!/bin/bash
        export NODE_PATH=/home/node_tmp/node_modules
        nohup npm run start --prefix /home/userapi > /tmp/myapp.log 2>&1 &
        echo $! > /tmp/myapp.pid
        echo "myapp started in background with PID $(cat /tmp/myapp.pid)"
        EOF

        sudo chmod +x /usr/local/bin/myapp-start
      args:
        executable: /bin/bash

# Creating corresponding "myapp-stop" script to stop the app easily :-)
    - name: Create myapp-stop script
      shell: |
        cat << 'EOF' | sudo tee /usr/local/bin/myapp-stop > /dev/null
        #!/bin/bash
        sudo pkill -u vagrant -f "node.*src"
        echo "myapp stopped (if running)"
        EOF

        sudo chmod +x /usr/local/bin/myapp-stop
      args:
        executable: /bin/bash

# Creating a "myapp-test" script to test the app easily :-)
    - name: Create myapp-test script
      shell: |
        cat << 'EOF' | sudo tee /usr/local/bin/myapp-test > /dev/null
        #!/bin/bash
        export NODE_PATH=/home/node_tmp/node_modules
        npm run test --prefix /home/userapi
        EOF

        sudo chmod +x /usr/local/bin/myapp-test
      args:
        executable: /bin/bash

# Launching Docker Compose
    - name: Lauching Docker compose Up => app containers startup !
      shell: |
        cd /home/dsti_project && \
        sudo docker compose up -d
      args:
        executable: /bin/bash



